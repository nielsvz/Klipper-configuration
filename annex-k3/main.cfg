[mcu]
## [X in X-mot]   - B Motor
## [Y in Y-mot]   - A Motor
## [E in Z-mot]  - Extruder
## [Z in E0-mot]  - Front Left
## [Z1 in E1-mot] - Rear Left
## [Z2 in E2-mot] - Rear Right
## [Z3 in E3-mot] - Front Right
## [Hotend PT100 in E4-mot] - PT100 MAX31865 stepstick
## Obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
##--------------------------------------------------------------------
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_000000000000000000000000-if00
##--------------------------------------------------------------------

[pause_resume]

[display_status]

[virtual_sdcard]
path: /home/pi/gcode_files

# Printer
[printer]
kinematics: cartesian
max_velocity: 500
max_accel: 2000 #change this to 7500 after commissioning
max_z_velocity: 10   #may be able to increase to 15 after comissioning.
max_z_accel: 100
square_corner_velocity: 8.0

# Gcode G2/G3 Arc Support
[gcode_arcs]
resolution: 0.1

# [input_shaper]
# shaper_freq_x: 50
# shaper_type_x: mzv
# shaper_freq_y: 50
# shaper_type_y: mzv

# Mesh Bed Settings
[bed_mesh]
speed: 200
horizontal_move_z: 20.0
mesh_min: 20,25
mesh_max: 150, 155
probe_count: 5,5
fade_start: 0.5
fade_end: 2
split_delta_z: .025
move_check_distance: 5.0
mesh_pps: 2,2
algorithm: bicubic
bicubic_tension: 0.1
relative_reference_index: 12  # ^^^because were measuring the offset from the nozzle switch to the bed using the center of the bed, the equation to find the location = (probe point count)/2-1

[include ../common/macros/cancel.cfg]
[include ../common/macros/clear_display.cfg]
[include ../common/macros/debug.cfg]
[include ../common/macros/pause_resume.cfg]
[include ../common/macros/purge_line.cfg]
[include ../common/macros/user_variables.cfg]
[include config/aliases.cfg]
[include config/bed.cfg]
[include config/extruder.cfg]
[include config/fans.cfg]
[include config/homing.cfg]
[include config/idle_timeout.cfg]
[include config/sensors.cfg]
[include config/stepper_driver.cfg]
[include config/stepper.cfg]
[include macro/filter.cfg]
[include macro/hotend_fan.cfg]
[include macro/start_end.cfg]
[include macro/user_variables.cfg]



# This file has been created by Trails, of Annex Engineering, for the K3 3D Printer.
# Please change settings for your specific build or ensure you place your items in the same spots on the same MCU as I have.
# I've added as many options as I can think of for different displays as well as listed the available commands you can use via the terminal at the bottom of this configuration file.

#THIS CONFIG IS FOR A 180mm x 180mm x 180mm K3 PRINTER ONLY FOR THE FYSETC SPIDER CONTROLLER
#PLEASE READ THE WHOLE CONFIG BEFORE ATTEMPTING TO DO ANYTHING
#CONNECTORS/PORTS ON THE CONTROLLERS ARE NOTED WITH COMMENTS FOR EACH LOCATION/INPUT/OUTPUT

# use the following modifiers before the pin definition (ex: ^!ar99)
# ! 			invert the logic
# ^ 			activate 5v pullup (does not apply to all pins)
# mcu_name: 	use pins on additional MCU (ex: z:ar10)

# |------------------------|
# |        BACKPACK        |
# |------------------------|
# | Y  |    | Z1 |    | X1 |
# |-----    ------    -----|
# |                        |
# | ------          ------ |
# | | Z  |          | Z2 | |
# | ------          ------ |
# |-----              -----|
# | X  |              | Y1 |
# |------------------------|

# Force Move used to force a single stepper to move. Not used once setup complete
[force_move]
enable_force_move: true

#    Use print_end for you slicer ending script
[gcode_macro print_end]
gcode:
  G91  							#relative positioning
  G0 E-0.3 F4800  				#retract 5mm of filament
  G0 Z+1.00 X-2 Y-2 F6000  		#short quick move to disengage from print
  G0 Z+5.00  F6000  				#move Z-Axis 1mm away from part

  G90  					#absolute positioning
  G0 X50 Y50 				#move gantry close to xy min, by nozzle switch in front
  G91  					#relative positioning
  G0 E10 F400			#extrude filament to get better blob on end
  G0 E-0.30 F1800  		#retract additional filament to move out of melt zone
  G90 					#absolute positioning

  M104 S0  				#turn off hotend
  #M140 S0  				#turn off heatbed

  #z bed placement control for end of print
    SAVE_GCODE_STATE NAME=END_state
    {% if printer.toolhead.position.z|float == printer.configfile.config["stepper_z"]["position_max"]|float %} #if z position = z max do the following
        # do nothing
    {% elif printer.toolhead.position.z|float >= 130|float %}    #if z position >= 130mnm do the following
        G91              #relative positioning
        G1 Z+10 F600     #move z down 10mm
        G90              #absolute positioning
    {% else %}  		 #if you dont meet any of the criteria
        G90              #absolute positioning
        G1 Z130 F600     #move z to 130mm
    {% endif %}
    RESTORE_GCODE_STATE NAME=END_state

  M106 S0  				#shut off part cooling fans
  #M84					#turn off motors
  clear_pause				#clear pause state encase it was enabled

#	Macro to execute when pausing printer
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{E} F2100
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000

#	Macro to execute when resuming printer
[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### end of definitions #####
    G91
    G1 E{E} F2100
    RESTORE_GCODE_STATE NAME=PAUSE_state
    BASE_RESUME

#	Macro to execute when canceling a print
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    print_end #execute the print end macro
  CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT

#	Notify when ABS Timer is complete
[delayed_gcode notify_chamber]
initial_duration: 0
gcode:
    {gcode.action_respond_info("action:prompt_begin Chamber Preheated")}
    {action_respond_info("action:prompt_choice OK")}
    {action_respond_info("action:prompt_show")}

#	Set Temps for chamber warmup when printing with abs
[gcode_macro abs_warmup_temp]
# params:
    # TEMP
gcode:
    {% set TEMP = params.TEMP|default(110) %}

  M106 S255					#turn part cooling fan on to blow heat around chamber
  M190 S{TEMP}				#set bed temperature and wait
  G28							#home machine
  G0 X90 Y90 Z20 F3000		#move to center of bed
  UPDATE_DELAYED_GCODE ID=notify_chamber DURATION=1200

#	Notify when filament is unloaded and ready to reload
[delayed_gcode notify_extruder_reload]
initial_duration: 0
gcode:
 {action_respond_info("action:prompt_begin Ready to Load Filament")}
 {action_respond_info("action:prompt_choice OK")}
 {action_respond_info("action:prompt_show")}

#	Macro to Load Filament
[gcode_macro load_filament]
# params:
#   EXTRUDER
gcode:
    {% set EXTRUDER = params.EXTRUDER|default(260) %}

    turn_fans_off			#turn part cooling fans off
    G0 X10 Y40 F18000		#move to area where can easily load filament
    {% if printer.toolhead.position.z|float == printer.configfile.config["stepper_z"]["position_max"]|float %} #if z position = z max do the following
        # do nothing
    {% elif printer.toolhead.position.z|float >= 50|float %}    #if z position >= 50mnm do the following
        #do nothing
    {% else %}  		 #if you dont meet any of the criteria
        G90              #absolute positioning
        G1 Z50 F600     #move z to 50mm
    {% endif %}
    M109 S{EXTRUDER}		#set hotend temperature and wait
    M83						#relative positioning on extruder
    G0 E120 F400  			#prime extruder
    M109 S0					#turn off extruder
    UPDATE_DELAYED_GCODE ID=notify_extruder_load DURATION=10

#	Notify when filament is loaded
[delayed_gcode notify_extruder_load]
initial_duration: 0
gcode:
 {action_respond_info("action:prompt_begin FIlament is Loaded")}
 {action_respond_info("action:prompt_choice OK")}
 {action_respond_info("action:prompt_show")}

#	Macro to Unload Filament
[gcode_macro unload_filament]
# params:
#   EXTRUDER
gcode:
    {% set EXTRUDER = params.EXTRUDER|default(260) %}

    turn_fans_off			#turn part cooling fans off
    G0 X10 Y40 F18000		#move to area where can easily load filament
    {% if printer.toolhead.position.z|float == printer.configfile.config["stepper_z"]["position_max"]|float %} #if z position = z max do the following
        # do nothing
    {% elif printer.toolhead.position.z|float >= 50|float %}    #if z position >= 50mnm do the following
        #do nothing
    {% else %}  		 #if you dont meet any of the criteria
        G90              #absolute positioning
        G1 Z50 F600     #move z to 50mm
    {% endif %}
    M109 S{EXTRUDER}		#set hotend temperature and wait
    M83						#relative positioning on extruder
    G0 E5 F400			#extrude filament to get better blob on end
    G0 E-600 F1800  		#retract additional filament to move out of melt zone
    UPDATE_DELAYED_GCODE ID=notify_extruder_reload DURATION=10

#	Scrubs the nozzle on the brass brush or silicone wiper located in the build chamber
[gcode_macro nozzle_clean]
gcode:
  SAVE_GCODE_STATE NAME=clean_nozzle_state	#store current nozzle location
  Wipe_Nozzle
  RESTORE_GCODE_STATE NAME=clean_nozzle_state MOVE=1 #restore current nozzle location

#   Settings for the nozzle wiper
[gcode_macro Nozzle_Wiper_Variables]
# the values below are for a wiper located at (-8, 125)
variable_purge_x:       -8  # x purge location
variable_purge_y:       112 # y purge location
variable_purge_x_entry: 0   # x entry location before going to the purge location
variable_purge_y_entry: 112 # y entry location before going to the purge location
variable_wipe_dx:       0   # distance to move in x from the purge position in order to wipe
variable_wipe_dy:       16  # distance to move in y from the purge position in order to wipe
variable_wipe_count:    2   # number of wipe cycles
variable_travel_speed:  300 # how fast travel speeds will be performed
variable_entry_speed:   100 # how fast to move from the entry location to the purge location
variable_wipe_speed:    50  # how fast to move when wiping
variable_purge_speed:   7   # how fast to extrude in mm/s when purging
variable_purge_fan:     64  # default fan speed out of 255 when purging
variable_wipe_fan:      128 # default fan speed out of 255 when wiping
gcode:

#   Move above the purge bucket
[gcode_macro Go_To_Purge_Location]
gcode:
    {% set Px = printer["gcode_macro Nozzle_Wiper_Variables"].purge_x|float %}
    {% set Py = printer["gcode_macro Nozzle_Wiper_Variables"].purge_y|float %}
    {% set Pxe = printer["gcode_macro Nozzle_Wiper_Variables"].purge_x_entry|float %}
    {% set Pye = printer["gcode_macro Nozzle_Wiper_Variables"].purge_y_entry|float %}
    {% set St = printer["gcode_macro Nozzle_Wiper_Variables"].travel_speed * 60 %}
    {% set Se = printer["gcode_macro Nozzle_Wiper_Variables"].entry_speed * 60 %}

    {% if not (printer.toolhead.position.x == Px and printer.toolhead.position.y == Py) %}
        G1 X{Pxe} Y{Pye} F{St}
        G1 X{Px} Y{Py} F{Se}
    {% endif %}

#   Wipe the nozzle on the brass brush or silicone wiper
[gcode_macro Wipe_Nozzle]
# params:
#   OLD_FAN_SPEED
gcode:
    {% set OLD_FAN_SPEED = params.OLD_FAN_SPEED|default(-1)|int %}
    {% set Px = printer["gcode_macro Nozzle_Wiper_Variables"].purge_x|float %}
    {% set Py = printer["gcode_macro Nozzle_Wiper_Variables"].purge_y|float %}
    {% set Pxe = printer["gcode_macro Nozzle_Wiper_Variables"].purge_x_entry|float %}
    {% set Pye = printer["gcode_macro Nozzle_Wiper_Variables"].purge_y_entry|float %}
    {% set Wdx = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_dx|float %}
    {% set Wdy = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_dy|float %}
    {% set Wc = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_count|int %}
    {% set Se = printer["gcode_macro Nozzle_Wiper_Variables"].entry_speed * 60 %}
    {% set Sw = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_speed * 60 %}
    {% set Sf = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_fan %}

    {% if OLD_FAN_SPEED == -1 %}
        {% set old_Sf = printer.fan.speed %}
    {% else %}
        {% set old_Sf = OLD_FAN_SPEED %}
    {% endif %}

    {% if printer.fan.speed < Sf %}
        {% set wait_for_fan = True %}
    {% else %}
        {% set wait_for_fan = False %}
    {% endif %}

    # go to purge location
    Go_To_Purge_Location

    # set fan speed for wiping
    M106 S{Sf}

    # wait for fan to cool filament if needed
    {% if wait_for_fan %}
        G4 P800
    {% endif %}

    # wipe nozzle
    G1 X{Px + Wdx} Y{Py + Wdy} F12000
    {% for i in range(Wc) %}
        G1 X{Px} Y{Py} F{Sw}
        G1 X{Px + Wdx} Y{Py + Wdy} F{Sw}
    {% endfor %}

    # move away from wiper
    G1 X{Pxe + Wdx} Y{Pye + Wdy} F{Se}

    # restore fan speed
    M106 S{old_Sf}

#   Purge material into the bucket
[gcode_macro Purge]
# params:
#   EXACT_TEMP: whether to cool to specified temperature if already above it
#   TEMPERATURE: minimum extruder temperature before purging
#   FEED_AMOUNT: length of material in mm to purge
gcode:
    {% set EXACT_TEMP = params.EXACT_TEMP|default(False) %}
    {% set TEMPERATURE = params.TEMPERATURE|default(230.0)|float %}
    {% set FEED_AMOUNT = params.FEED_AMOUNT|default(15.0)|float %}
    {% set Sp = printer["gcode_macro Nozzle_Wiper_Variables"].purge_speed * 60 %}
    {% set Sf = printer["gcode_macro Nozzle_Wiper_Variables"].purge_fan %}
    {% set old_Sf = printer.fan.speed %}

    # go to purge location
    Go_To_Purge_Location

    # wait for hotend
    {% if EXACT_TEMP == 'True' or printer.extruder.temperature < TEMPERATURE %}
        M109 S{TEMPERATURE}
    {% endif %}

    # set fan speed for purging
    M106 S{Sf}

    # extrude
    M83
    G1 E{FEED_AMOUNT - 3} F{Sp}
    G1 E3 F100
    G92 E0.0

    # wait
    G4 P800

    # wipe the nozzle
    Wipe_Nozzle OLD_FAN_SPEED={old_Sf}

#	Macro for M600 - filament out pause resume
[gcode_macro M600]
# params:
#   X
#   Y
#   Z
gcode:
    {% set X = params.X|default(40) %}
    {% set Y = params.Y|default(40) %}
    {% set Z = params.Z|default(10) %}

  {% if printer.toolhead.status == "Ready" %}
    # do nothing
  {% else %}
      M117 Filament Change
    SAVE_GCODE_STATE NAME=M600_state
      PAUSE
    G91
    G1 E-5 F4000
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G0 E15 F1800			#extrude filament to get better blob on end
    G0 E-500 F4800  		#retract additional filament to move out of melt zone
    RESTORE_GCODE_STATE NAME=M600_state
  {% endif %}

#	Use this command to load filament during a mid print filament swap
[gcode_macro SWAP_RESUME]
gcode:
   M117 Printing...
  LOAD_FILAMENT
  RESUME

#	Macro to Turn Fans Off
[gcode_macro turn_fans_off]
gcode:
  M107

#	Redefine M204 gcode to properly accel_to_decel when called instead of keeping default through the print
[gcode_macro M204]
rename_existing: M204.1
gcode:

   {% if 'P' in params %}{% set accel = params.P %}{% endif %}
   {% if 'S' in params %}{% set accel = params.S %}{% endif %}
   {% if 'T' in params %}{% set accel = params.T %}{% endif %}

    SET_VELOCITY_LIMIT ACCEL={ accel } ACCEL_TO_DECEL={ accel|float / 2.0}

#	Macro to Attach the Magnetic Probe
[gcode_macro attach_probe_to_toolhead]
gcode:
  ATTACH_PROBE

#	Macro to Detach the Magnetic Probe
[gcode_macro detach_probe_from_toolhead]
gcode:
  DETACH_PROBE
